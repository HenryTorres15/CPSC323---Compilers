token          lexeme
---------------------
Keyword        integer
Identifier     one_constant
Separator      ;
Keyword        integer
Identifier     zero_constant
Separator      ;
Keyword        integer
Identifier     i
Separator      ;
Keyword        integer
Identifier     n
Separator      ;
Keyword        integer
Identifier     prev
Separator      ;
Keyword        integer
Identifier     temp
Separator      ;
Keyword        integer
Identifier     root
Separator      ;
Keyword        boolean
Identifier     loop
Separator      ;
Identifier     one_constant
Operator       =
Integer        1
Separator      ;
Identifier     zero_constant
Operator       =
Integer        0
Separator      ;
Keyword        get
Separator      (
Identifier     n
Separator      )
Separator      ;
Identifier     prev
Operator       =
Identifier     n
Separator      ;
Identifier     i
Operator       =
Integer        0
Separator      ;
Identifier     loop
Operator       =
Keyword        true
Separator      ;
Keyword        while
Separator      (
Identifier     loop
Separator      )
Separator      {
Identifier     temp
Operator       =
Identifier     i
Operator       *
Identifier     i
Separator      ;
Keyword        if
Separator      (
Identifier     n
Operator       >
Identifier     temp
Separator      )
Identifier     temp
Operator       =
Identifier     n
Operator       -
Identifier     temp
Separator      ;
Keyword        otherwise
Identifier     temp
Operator       =
Identifier     temp
Operator       -
Identifier     n
Separator      ;
Keyword        fi
Keyword        if
Separator      (
Identifier     temp
Operator       >
Identifier     prev
Separator      )
Separator      {
Identifier     loop
Operator       =
Identifier     False
Separator      ;
Identifier     i
Operator       =
Identifier     i
Operator       -
Integer        1
Separator      ;
Separator      }
Keyword        otherwise
Separator      {
Identifier     prev
Operator       =
Identifier     temp
Separator      ;
Identifier     i
Operator       =
Identifier     i
Operator       +
Integer        1
Separator      ;
Separator      }
Keyword        fi
Separator      }
Identifier     root
Operator       =
Identifier     i
Separator      ;
Identifier     temp
Operator       =
Integer        0
Separator      ;
Identifier     i
Operator       =
Integer        0
Separator      ;
Keyword        while
Separator      (
Identifier     root
Operator       >
Integer        0
Separator      )
Separator      {
Identifier     prev
Operator       =
Identifier     root
Separator      ;
Identifier     root
Operator       =
Identifier     root
Operator       /
Integer        2
Separator      ;
Keyword        if
Separator      (
Identifier     root
Operator       *
Integer        2
Operator       ==
Identifier     prev
Separator      )
Identifier     root
Operator       =
Identifier     root
Separator      ;
Keyword        otherwise
Identifier     temp
Operator       =
Identifier     temp
Operator       +
Integer        1
Separator      ;
Keyword        fi
Identifier     temp
Operator       =
Identifier     temp
Operator       *
Integer        2
Separator      ;
Identifier     i
Operator       =
Identifier     i
Operator       +
Integer        1
Separator      ;
Separator      }
Identifier     temp
Operator       =
Identifier     temp
Operator       /
Integer        2
Separator      ;
Keyword        while
Separator      (
Identifier     i
Operator       >
Integer        0
Separator      )
Separator      {
Identifier     i
Operator       =
Identifier     i
Operator       -
Integer        1
Separator      ;
Keyword        if
Separator      (
Separator      (
Separator      (
Identifier     temp
Operator       /
Integer        2
Separator      )
Operator       *
Integer        2
Separator      )
Operator       ==
Identifier     temp
Separator      )
Keyword        put
Separator      (
Identifier     one_constant
Separator      )
Separator      ;
Keyword        otherwise
Keyword        put
Separator      (
Identifier     zero_constant
Separator      )
Separator      ;
Keyword        fi
Identifier     temp
Operator       =
Identifier     temp
Operator       /
Integer        2
Separator      ;
Separator      }
Separator      $$
